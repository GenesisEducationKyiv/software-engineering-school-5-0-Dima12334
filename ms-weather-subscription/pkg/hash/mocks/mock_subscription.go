// Code generated by MockGen. DO NOT EDIT.
// Source: subscription.go
//
// Generated by this command:
//
//	mockgen -source=subscription.go -destination=mocks/mock_subscription.go
//

// Package mock_hash is a generated GoMock package.
package mock_hash

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSubscriptionHasher is a mock of SubscriptionHasher interface.
type MockSubscriptionHasher struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionHasherMockRecorder
	isgomock struct{}
}

// MockSubscriptionHasherMockRecorder is the mock recorder for MockSubscriptionHasher.
type MockSubscriptionHasherMockRecorder struct {
	mock *MockSubscriptionHasher
}

// NewMockSubscriptionHasher creates a new mock instance.
func NewMockSubscriptionHasher(ctrl *gomock.Controller) *MockSubscriptionHasher {
	mock := &MockSubscriptionHasher{ctrl: ctrl}
	mock.recorder = &MockSubscriptionHasherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionHasher) EXPECT() *MockSubscriptionHasherMockRecorder {
	return m.recorder
}

// GenerateSubscriptionHash mocks base method.
func (m *MockSubscriptionHasher) GenerateSubscriptionHash(email, city, frequency string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateSubscriptionHash", email, city, frequency)
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateSubscriptionHash indicates an expected call of GenerateSubscriptionHash.
func (mr *MockSubscriptionHasherMockRecorder) GenerateSubscriptionHash(email, city, frequency any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateSubscriptionHash", reflect.TypeOf((*MockSubscriptionHasher)(nil).GenerateSubscriptionHash), email, city, frequency)
}
