// Code generated by MockGen. DO NOT EDIT.
// Source: email_publisher.go
//
// Generated by this command:
//
//	mockgen -source=email_publisher.go -destination=mocks/mock_email_publisher.go
//

// Package mock_publisher is a generated GoMock package.
package mock_publisher

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEmailPublisher is a mock of EmailPublisher interface.
type MockEmailPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockEmailPublisherMockRecorder
	isgomock struct{}
}

// MockEmailPublisherMockRecorder is the mock recorder for MockEmailPublisher.
type MockEmailPublisherMockRecorder struct {
	mock *MockEmailPublisher
}

// NewMockEmailPublisher creates a new mock instance.
func NewMockEmailPublisher(ctrl *gomock.Controller) *MockEmailPublisher {
	mock := &MockEmailPublisher{ctrl: ctrl}
	mock.recorder = &MockEmailPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailPublisher) EXPECT() *MockEmailPublisherMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockEmailPublisher) Publish(queue string, msg any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", queue, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockEmailPublisherMockRecorder) Publish(queue, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockEmailPublisher)(nil).Publish), queue, msg)
}
