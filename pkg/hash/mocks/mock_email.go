// Code generated by MockGen. DO NOT EDIT.
// Source: email.go
//
// Generated by this command:
//
//	mockgen -source=email.go -destination=mocks/mock_email.go
//

// Package mock_hash is a generated GoMock package.
package mock_hash

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEmailHasher is a mock of EmailHasher interface.
type MockEmailHasher struct {
	ctrl     *gomock.Controller
	recorder *MockEmailHasherMockRecorder
	isgomock struct{}
}

// MockEmailHasherMockRecorder is the mock recorder for MockEmailHasher.
type MockEmailHasherMockRecorder struct {
	mock *MockEmailHasher
}

// NewMockEmailHasher creates a new mock instance.
func NewMockEmailHasher(ctrl *gomock.Controller) *MockEmailHasher {
	mock := &MockEmailHasher{ctrl: ctrl}
	mock.recorder = &MockEmailHasherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailHasher) EXPECT() *MockEmailHasherMockRecorder {
	return m.recorder
}

// GenerateEmailHash mocks base method.
func (m *MockEmailHasher) GenerateEmailHash(email string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateEmailHash", email)
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateEmailHash indicates an expected call of GenerateEmailHash.
func (mr *MockEmailHasherMockRecorder) GenerateEmailHash(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateEmailHash", reflect.TypeOf((*MockEmailHasher)(nil).GenerateEmailHash), email)
}
