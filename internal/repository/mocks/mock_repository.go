// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=mocks/mock_repository.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"
	time "time"
	domain "weather_forecast_sub/internal/domain"

	gomock "go.uber.org/mock/gomock"
)

// MockSubscriptionRepository is a mock of SubscriptionRepository interface.
type MockSubscriptionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionRepositoryMockRecorder
	isgomock struct{}
}

// MockSubscriptionRepositoryMockRecorder is the mock recorder for MockSubscriptionRepository.
type MockSubscriptionRepositoryMockRecorder struct {
	mock *MockSubscriptionRepository
}

// NewMockSubscriptionRepository creates a new mock instance.
func NewMockSubscriptionRepository(ctrl *gomock.Controller) *MockSubscriptionRepository {
	mock := &MockSubscriptionRepository{ctrl: ctrl}
	mock.recorder = &MockSubscriptionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionRepository) EXPECT() *MockSubscriptionRepositoryMockRecorder {
	return m.recorder
}

// Confirm mocks base method.
func (m *MockSubscriptionRepository) Confirm(ctx context.Context, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Confirm", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Confirm indicates an expected call of Confirm.
func (mr *MockSubscriptionRepositoryMockRecorder) Confirm(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Confirm", reflect.TypeOf((*MockSubscriptionRepository)(nil).Confirm), ctx, token)
}

// Create mocks base method.
func (m *MockSubscriptionRepository) Create(ctx context.Context, subscription domain.Subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, subscription)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSubscriptionRepositoryMockRecorder) Create(ctx, subscription any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSubscriptionRepository)(nil).Create), ctx, subscription)
}

// Delete mocks base method.
func (m *MockSubscriptionRepository) Delete(ctx context.Context, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSubscriptionRepositoryMockRecorder) Delete(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSubscriptionRepository)(nil).Delete), ctx, token)
}

// GetByToken mocks base method.
func (m *MockSubscriptionRepository) GetByToken(ctx context.Context, token string) (domain.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByToken", ctx, token)
	ret0, _ := ret[0].(domain.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByToken indicates an expected call of GetByToken.
func (mr *MockSubscriptionRepositoryMockRecorder) GetByToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByToken", reflect.TypeOf((*MockSubscriptionRepository)(nil).GetByToken), ctx, token)
}

// GetConfirmedByFrequency mocks base method.
func (m *MockSubscriptionRepository) GetConfirmedByFrequency(frequency string) ([]domain.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfirmedByFrequency", frequency)
	ret0, _ := ret[0].([]domain.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfirmedByFrequency indicates an expected call of GetConfirmedByFrequency.
func (mr *MockSubscriptionRepositoryMockRecorder) GetConfirmedByFrequency(frequency any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfirmedByFrequency", reflect.TypeOf((*MockSubscriptionRepository)(nil).GetConfirmedByFrequency), frequency)
}

// SetLastSentAt mocks base method.
func (m *MockSubscriptionRepository) SetLastSentAt(lastSentAt time.Time, tokens []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLastSentAt", lastSentAt, tokens)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLastSentAt indicates an expected call of SetLastSentAt.
func (mr *MockSubscriptionRepositoryMockRecorder) SetLastSentAt(lastSentAt, tokens any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLastSentAt", reflect.TypeOf((*MockSubscriptionRepository)(nil).SetLastSentAt), lastSentAt, tokens)
}
