// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=mocks/mock_service.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"
	domain "weather_forecast_sub/internal/domain"
	service "weather_forecast_sub/internal/service"

	gomock "go.uber.org/mock/gomock"
)

// MockSubscription is a mock of Subscription interface.
type MockSubscription struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionMockRecorder
	isgomock struct{}
}

// MockSubscriptionMockRecorder is the mock recorder for MockSubscription.
type MockSubscriptionMockRecorder struct {
	mock *MockSubscription
}

// NewMockSubscription creates a new mock instance.
func NewMockSubscription(ctrl *gomock.Controller) *MockSubscription {
	mock := &MockSubscription{ctrl: ctrl}
	mock.recorder = &MockSubscriptionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscription) EXPECT() *MockSubscriptionMockRecorder {
	return m.recorder
}

// Confirm mocks base method.
func (m *MockSubscription) Confirm(ctx context.Context, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Confirm", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Confirm indicates an expected call of Confirm.
func (mr *MockSubscriptionMockRecorder) Confirm(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Confirm", reflect.TypeOf((*MockSubscription)(nil).Confirm), ctx, token)
}

// Create mocks base method.
func (m *MockSubscription) Create(ctx context.Context, inp domain.CreateSubscriptionInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, inp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSubscriptionMockRecorder) Create(ctx, inp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSubscription)(nil).Create), ctx, inp)
}

// Delete mocks base method.
func (m *MockSubscription) Delete(ctx context.Context, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSubscriptionMockRecorder) Delete(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSubscription)(nil).Delete), ctx, token)
}

// MockWeatherForecastSender is a mock of WeatherForecastSender interface.
type MockWeatherForecastSender struct {
	ctrl     *gomock.Controller
	recorder *MockWeatherForecastSenderMockRecorder
	isgomock struct{}
}

// MockWeatherForecastSenderMockRecorder is the mock recorder for MockWeatherForecastSender.
type MockWeatherForecastSenderMockRecorder struct {
	mock *MockWeatherForecastSender
}

// NewMockWeatherForecastSender creates a new mock instance.
func NewMockWeatherForecastSender(ctrl *gomock.Controller) *MockWeatherForecastSender {
	mock := &MockWeatherForecastSender{ctrl: ctrl}
	mock.recorder = &MockWeatherForecastSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWeatherForecastSender) EXPECT() *MockWeatherForecastSenderMockRecorder {
	return m.recorder
}

// SendDailyWeatherForecast mocks base method.
func (m *MockWeatherForecastSender) SendDailyWeatherForecast(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendDailyWeatherForecast", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendDailyWeatherForecast indicates an expected call of SendDailyWeatherForecast.
func (mr *MockWeatherForecastSenderMockRecorder) SendDailyWeatherForecast(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDailyWeatherForecast", reflect.TypeOf((*MockWeatherForecastSender)(nil).SendDailyWeatherForecast), ctx)
}

// SendHourlyWeatherForecast mocks base method.
func (m *MockWeatherForecastSender) SendHourlyWeatherForecast(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHourlyWeatherForecast", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHourlyWeatherForecast indicates an expected call of SendHourlyWeatherForecast.
func (mr *MockWeatherForecastSenderMockRecorder) SendHourlyWeatherForecast(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHourlyWeatherForecast", reflect.TypeOf((*MockWeatherForecastSender)(nil).SendHourlyWeatherForecast), ctx)
}

// MockWeather is a mock of Weather interface.
type MockWeather struct {
	ctrl     *gomock.Controller
	recorder *MockWeatherMockRecorder
	isgomock struct{}
}

// MockWeatherMockRecorder is the mock recorder for MockWeather.
type MockWeatherMockRecorder struct {
	mock *MockWeather
}

// NewMockWeather creates a new mock instance.
func NewMockWeather(ctrl *gomock.Controller) *MockWeather {
	mock := &MockWeather{ctrl: ctrl}
	mock.recorder = &MockWeatherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWeather) EXPECT() *MockWeatherMockRecorder {
	return m.recorder
}

// GetCurrentWeather mocks base method.
func (m *MockWeather) GetCurrentWeather(ctx context.Context, city string) (*domain.WeatherResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentWeather", ctx, city)
	ret0, _ := ret[0].(*domain.WeatherResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentWeather indicates an expected call of GetCurrentWeather.
func (mr *MockWeatherMockRecorder) GetCurrentWeather(ctx, city any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentWeather", reflect.TypeOf((*MockWeather)(nil).GetCurrentWeather), ctx, city)
}

// GetDayWeather mocks base method.
func (m *MockWeather) GetDayWeather(ctx context.Context, city string) (*domain.DayWeatherResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDayWeather", ctx, city)
	ret0, _ := ret[0].(*domain.DayWeatherResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDayWeather indicates an expected call of GetDayWeather.
func (mr *MockWeatherMockRecorder) GetDayWeather(ctx, city any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDayWeather", reflect.TypeOf((*MockWeather)(nil).GetDayWeather), ctx, city)
}

// MockSubscriptionEmails is a mock of SubscriptionEmails interface.
type MockSubscriptionEmails struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionEmailsMockRecorder
	isgomock struct{}
}

// MockSubscriptionEmailsMockRecorder is the mock recorder for MockSubscriptionEmails.
type MockSubscriptionEmailsMockRecorder struct {
	mock *MockSubscriptionEmails
}

// NewMockSubscriptionEmails creates a new mock instance.
func NewMockSubscriptionEmails(ctrl *gomock.Controller) *MockSubscriptionEmails {
	mock := &MockSubscriptionEmails{ctrl: ctrl}
	mock.recorder = &MockSubscriptionEmailsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionEmails) EXPECT() *MockSubscriptionEmailsMockRecorder {
	return m.recorder
}

// SendConfirmationEmail mocks base method.
func (m *MockSubscriptionEmails) SendConfirmationEmail(arg0 service.ConfirmationEmailInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendConfirmationEmail", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendConfirmationEmail indicates an expected call of SendConfirmationEmail.
func (mr *MockSubscriptionEmailsMockRecorder) SendConfirmationEmail(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendConfirmationEmail", reflect.TypeOf((*MockSubscriptionEmails)(nil).SendConfirmationEmail), arg0)
}

// MockWeatherEmails is a mock of WeatherEmails interface.
type MockWeatherEmails struct {
	ctrl     *gomock.Controller
	recorder *MockWeatherEmailsMockRecorder
	isgomock struct{}
}

// MockWeatherEmailsMockRecorder is the mock recorder for MockWeatherEmails.
type MockWeatherEmailsMockRecorder struct {
	mock *MockWeatherEmails
}

// NewMockWeatherEmails creates a new mock instance.
func NewMockWeatherEmails(ctrl *gomock.Controller) *MockWeatherEmails {
	mock := &MockWeatherEmails{ctrl: ctrl}
	mock.recorder = &MockWeatherEmailsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWeatherEmails) EXPECT() *MockWeatherEmailsMockRecorder {
	return m.recorder
}

// SendWeatherForecastDailyEmail mocks base method.
func (m *MockWeatherEmails) SendWeatherForecastDailyEmail(arg0 service.WeatherForecastEmailInput[*domain.DayWeatherResponse]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendWeatherForecastDailyEmail", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendWeatherForecastDailyEmail indicates an expected call of SendWeatherForecastDailyEmail.
func (mr *MockWeatherEmailsMockRecorder) SendWeatherForecastDailyEmail(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendWeatherForecastDailyEmail", reflect.TypeOf((*MockWeatherEmails)(nil).SendWeatherForecastDailyEmail), arg0)
}

// SendWeatherForecastHourlyEmail mocks base method.
func (m *MockWeatherEmails) SendWeatherForecastHourlyEmail(arg0 service.WeatherForecastEmailInput[*domain.WeatherResponse]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendWeatherForecastHourlyEmail", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendWeatherForecastHourlyEmail indicates an expected call of SendWeatherForecastHourlyEmail.
func (mr *MockWeatherEmailsMockRecorder) SendWeatherForecastHourlyEmail(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendWeatherForecastHourlyEmail", reflect.TypeOf((*MockWeatherEmails)(nil).SendWeatherForecastHourlyEmail), arg0)
}
