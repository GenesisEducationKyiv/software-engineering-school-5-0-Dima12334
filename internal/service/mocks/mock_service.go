// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=mocks/mock_service.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"
	service "weather_forecast_sub/internal/service"
	clients "weather_forecast_sub/pkg/clients"

	gomock "go.uber.org/mock/gomock"
)

// MockSubscription is a mock of Subscription interface.
type MockSubscription struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionMockRecorder
	isgomock struct{}
}

// MockSubscriptionMockRecorder is the mock recorder for MockSubscription.
type MockSubscriptionMockRecorder struct {
	mock *MockSubscription
}

// NewMockSubscription creates a new mock instance.
func NewMockSubscription(ctrl *gomock.Controller) *MockSubscription {
	mock := &MockSubscription{ctrl: ctrl}
	mock.recorder = &MockSubscriptionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscription) EXPECT() *MockSubscriptionMockRecorder {
	return m.recorder
}

// Confirm mocks base method.
func (m *MockSubscription) Confirm(ctx context.Context, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Confirm", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Confirm indicates an expected call of Confirm.
func (mr *MockSubscriptionMockRecorder) Confirm(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Confirm", reflect.TypeOf((*MockSubscription)(nil).Confirm), ctx, token)
}

// Create mocks base method.
func (m *MockSubscription) Create(ctx context.Context, inp service.CreateSubscriptionInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, inp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSubscriptionMockRecorder) Create(ctx, inp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSubscription)(nil).Create), ctx, inp)
}

// Delete mocks base method.
func (m *MockSubscription) Delete(ctx context.Context, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSubscriptionMockRecorder) Delete(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSubscription)(nil).Delete), ctx, token)
}

// MockCronJobs is a mock of CronJobs interface.
type MockCronJobs struct {
	ctrl     *gomock.Controller
	recorder *MockCronJobsMockRecorder
	isgomock struct{}
}

// MockCronJobsMockRecorder is the mock recorder for MockCronJobs.
type MockCronJobsMockRecorder struct {
	mock *MockCronJobs
}

// NewMockCronJobs creates a new mock instance.
func NewMockCronJobs(ctrl *gomock.Controller) *MockCronJobs {
	mock := &MockCronJobs{ctrl: ctrl}
	mock.recorder = &MockCronJobsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCronJobs) EXPECT() *MockCronJobsMockRecorder {
	return m.recorder
}

// SendDailyWeatherForecast mocks base method.
func (m *MockCronJobs) SendDailyWeatherForecast(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendDailyWeatherForecast", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendDailyWeatherForecast indicates an expected call of SendDailyWeatherForecast.
func (mr *MockCronJobsMockRecorder) SendDailyWeatherForecast(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDailyWeatherForecast", reflect.TypeOf((*MockCronJobs)(nil).SendDailyWeatherForecast), ctx)
}

// SendHourlyWeatherForecast mocks base method.
func (m *MockCronJobs) SendHourlyWeatherForecast(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHourlyWeatherForecast", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHourlyWeatherForecast indicates an expected call of SendHourlyWeatherForecast.
func (mr *MockCronJobsMockRecorder) SendHourlyWeatherForecast(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHourlyWeatherForecast", reflect.TypeOf((*MockCronJobs)(nil).SendHourlyWeatherForecast), ctx)
}

// MockWeather is a mock of Weather interface.
type MockWeather struct {
	ctrl     *gomock.Controller
	recorder *MockWeatherMockRecorder
	isgomock struct{}
}

// MockWeatherMockRecorder is the mock recorder for MockWeather.
type MockWeatherMockRecorder struct {
	mock *MockWeather
}

// NewMockWeather creates a new mock instance.
func NewMockWeather(ctrl *gomock.Controller) *MockWeather {
	mock := &MockWeather{ctrl: ctrl}
	mock.recorder = &MockWeatherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWeather) EXPECT() *MockWeatherMockRecorder {
	return m.recorder
}

// GetCurrentWeather mocks base method.
func (m *MockWeather) GetCurrentWeather(ctx context.Context, city string) (*clients.WeatherResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentWeather", ctx, city)
	ret0, _ := ret[0].(*clients.WeatherResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentWeather indicates an expected call of GetCurrentWeather.
func (mr *MockWeatherMockRecorder) GetCurrentWeather(ctx, city any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentWeather", reflect.TypeOf((*MockWeather)(nil).GetCurrentWeather), ctx, city)
}

// GetDayWeather mocks base method.
func (m *MockWeather) GetDayWeather(ctx context.Context, city string) (*clients.DayWeatherResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDayWeather", ctx, city)
	ret0, _ := ret[0].(*clients.DayWeatherResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDayWeather indicates an expected call of GetDayWeather.
func (mr *MockWeatherMockRecorder) GetDayWeather(ctx, city any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDayWeather", reflect.TypeOf((*MockWeather)(nil).GetDayWeather), ctx, city)
}

// MockEmails is a mock of Emails interface.
type MockEmails struct {
	ctrl     *gomock.Controller
	recorder *MockEmailsMockRecorder
	isgomock struct{}
}

// MockEmailsMockRecorder is the mock recorder for MockEmails.
type MockEmailsMockRecorder struct {
	mock *MockEmails
}

// NewMockEmails creates a new mock instance.
func NewMockEmails(ctrl *gomock.Controller) *MockEmails {
	mock := &MockEmails{ctrl: ctrl}
	mock.recorder = &MockEmailsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmails) EXPECT() *MockEmailsMockRecorder {
	return m.recorder
}

// SendConfirmationEmail mocks base method.
func (m *MockEmails) SendConfirmationEmail(arg0 service.ConfirmationEmailInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendConfirmationEmail", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendConfirmationEmail indicates an expected call of SendConfirmationEmail.
func (mr *MockEmailsMockRecorder) SendConfirmationEmail(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendConfirmationEmail", reflect.TypeOf((*MockEmails)(nil).SendConfirmationEmail), arg0)
}

// SendWeatherForecastDailyEmail mocks base method.
func (m *MockEmails) SendWeatherForecastDailyEmail(arg0 service.WeatherForecastEmailInput[*clients.DayWeatherResponse]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendWeatherForecastDailyEmail", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendWeatherForecastDailyEmail indicates an expected call of SendWeatherForecastDailyEmail.
func (mr *MockEmailsMockRecorder) SendWeatherForecastDailyEmail(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendWeatherForecastDailyEmail", reflect.TypeOf((*MockEmails)(nil).SendWeatherForecastDailyEmail), arg0)
}

// SendWeatherForecastHourlyEmail mocks base method.
func (m *MockEmails) SendWeatherForecastHourlyEmail(arg0 service.WeatherForecastEmailInput[*clients.WeatherResponse]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendWeatherForecastHourlyEmail", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendWeatherForecastHourlyEmail indicates an expected call of SendWeatherForecastHourlyEmail.
func (mr *MockEmailsMockRecorder) SendWeatherForecastHourlyEmail(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendWeatherForecastHourlyEmail", reflect.TypeOf((*MockEmails)(nil).SendWeatherForecastHourlyEmail), arg0)
}
