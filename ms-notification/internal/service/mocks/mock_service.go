// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=mocks/mock_service.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	domain "ms-notification/internal/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEmails is a mock of Emails interface.
type MockEmails struct {
	ctrl     *gomock.Controller
	recorder *MockEmailsMockRecorder
	isgomock struct{}
}

// MockEmailsMockRecorder is the mock recorder for MockEmails.
type MockEmailsMockRecorder struct {
	mock *MockEmails
}

// NewMockEmails creates a new mock instance.
func NewMockEmails(ctrl *gomock.Controller) *MockEmails {
	mock := &MockEmails{ctrl: ctrl}
	mock.recorder = &MockEmailsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmails) EXPECT() *MockEmailsMockRecorder {
	return m.recorder
}

// SendConfirmationEmail mocks base method.
func (m *MockEmails) SendConfirmationEmail(arg0 domain.ConfirmationEmailInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendConfirmationEmail", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendConfirmationEmail indicates an expected call of SendConfirmationEmail.
func (mr *MockEmailsMockRecorder) SendConfirmationEmail(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendConfirmationEmail", reflect.TypeOf((*MockEmails)(nil).SendConfirmationEmail), arg0)
}

// SendWeatherForecastDailyEmail mocks base method.
func (m *MockEmails) SendWeatherForecastDailyEmail(arg0 domain.WeatherForecastEmailInput[*domain.DayWeatherResponse]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendWeatherForecastDailyEmail", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendWeatherForecastDailyEmail indicates an expected call of SendWeatherForecastDailyEmail.
func (mr *MockEmailsMockRecorder) SendWeatherForecastDailyEmail(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendWeatherForecastDailyEmail", reflect.TypeOf((*MockEmails)(nil).SendWeatherForecastDailyEmail), arg0)
}

// SendWeatherForecastHourlyEmail mocks base method.
func (m *MockEmails) SendWeatherForecastHourlyEmail(arg0 domain.WeatherForecastEmailInput[*domain.WeatherResponse]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendWeatherForecastHourlyEmail", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendWeatherForecastHourlyEmail indicates an expected call of SendWeatherForecastHourlyEmail.
func (mr *MockEmailsMockRecorder) SendWeatherForecastHourlyEmail(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendWeatherForecastHourlyEmail", reflect.TypeOf((*MockEmails)(nil).SendWeatherForecastHourlyEmail), arg0)
}
